# -*- coding: utf-8 -*-
"""Copia de Script.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1GbxzMdfEruYIcUEe2K5UkExDkqNLXVOV
"""

import numpy as np
import skfuzzy as fuzz
from skfuzzy import control as ctrl

# Declaración del Universo de los antecedentes y consecuentes
sensor= ctrl.Antecedent(np.arange(0, 30001, 1), 'Sensor') #Antecedentes son entradas
hora= ctrl.Antecedent(np.arange(0, 24, 1), 'Hora') #Antecedentes son entradas
enclamp= ctrl.Consequent(np.arange(0, 101, 1), 'Porcentaje ciclo iluminación') #Consecuentes son salidas

# Funciones de pertenencia Sensor
sensor['Muy Bajo'] = fuzz.trapmf(sensor.universe, [0,0,5500,6000]) 
sensor['Bajo'] = fuzz.trapmf(sensor.universe, [5500, 6000, 10000, 10500])
sensor['Medio'] = fuzz.trapmf(sensor.universe, [10000, 10500, 20000, 20500])
sensor['Aceptable'] = fuzz.trapmf(sensor.universe, [20000, 20500, 25000, 25500])
sensor['Ideal'] = fuzz.trapmf(sensor.universe, [25000, 25500, 30000, 30000])

# Funciones de pertenencia % Luminosidad
enclamp['Nulo'] = fuzz.trimf(enclamp.universe, [0,0,1]) 
enclamp['Bajo'] = fuzz.trapmf(enclamp.universe, [0,1,25,35]) 
enclamp['Medio'] = fuzz.trapmf(enclamp.universe, [25,35,55,65]) 
enclamp['Alto'] = fuzz.trapmf(enclamp.universe, [55,65,80,85]) 
enclamp['Muy Alto'] = fuzz.trapmf(enclamp.universe, [80,85,100,100]) 

# Funciones de pertenencia Hora 
hora['Madrugada'] = fuzz.trapmf(hora.universe, [0,0,4,5]) 
hora['Mañana'] = fuzz.trapmf(hora.universe, [4,5,9,10]) 
hora['Medio dia'] = fuzz.trapmf(hora.universe, [9,10,14,15]) 
hora['Tarde'] = fuzz.trapmf(hora.universe, [14,15,19,20]) 
hora['Noche'] = fuzz.trapmf(hora.universe, [19,20,23,23]) 

#Establecimiento de reglas
rule1 = ctrl.Rule((hora['Madrugada'] | hora['Noche']) & (sensor['Muy Bajo'] | sensor['Bajo'] | sensor['Medio'] | sensor['Aceptable'] | sensor['Ideal']), enclamp['Nulo']) #Garantizar horas de oscuridad
rule2 = ctrl.Rule(sensor['Ideal'], enclamp['Nulo']) #Sin importar la hora (excepto madrugada y noche), cuando ya es ideal no se suministra luminosidad
rule3 = ctrl.Rule(sensor['Muy Bajo'] & (~(hora['Madrugada'] | hora['Noche'])), enclamp['Muy Alto']) #Sin importar la hora (excepto madrugada y noche), cuando es muy bajo se suministra luminosidad máxima
rule4 = ctrl.Rule(sensor['Bajo'] & (~(hora['Madrugada'] | hora['Noche'])), enclamp['Alto']) #Sin importar la hora (excepto madrugada y noche), cuando es bajo se suministra luminosidad alta
rule5 = ctrl.Rule(hora['Medio dia'] & sensor['Aceptable'], enclamp['Nulo']) #Al medio dia si está en aceptable no se suminista luminosidad
rule6 = ctrl.Rule(sensor['Medio'] & (~(hora['Madrugada'] | hora['Noche'])), enclamp['Medio']) #Sin importar la hora (excepto madrugada y noche), cuando es medio se suministra luminosidad media
rule7 = ctrl.Rule((hora['Mañana'] | hora['Tarde']) & sensor['Aceptable'], enclamp['Bajo']) #En la mañana y en la tarde cuando es aceptable se suministra luminosidad baja

luminosidad_ctrl = ctrl.ControlSystem([rule1, rule2, rule3, rule4, rule5, rule6, rule7])
luminosidad = ctrl.ControlSystemSimulation(luminosidad_ctrl)

#Creación de la función para obtener el % de luminosidad necesario
def pc_lum (l_sensada,hora):
  l_sen_ampli = l_sensada*30
  # Entrada para ControlSystem 
  luminosidad.input['Sensor'] = l_sen_ampli
  luminosidad.input['Hora'] = hora
  # Y que chille
  luminosidad.compute()
  salida= luminosidad.output['Porcentaje ciclo iluminación']
  return salida/100